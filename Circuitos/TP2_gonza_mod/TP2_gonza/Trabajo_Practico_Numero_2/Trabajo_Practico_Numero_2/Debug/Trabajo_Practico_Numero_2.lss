
Trabajo_Practico_Numero_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000067a  0000070e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000067a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800112  00800112  00000720  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000750  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000140e  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d0  00000000  00000000  00001ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a50  00000000  00000000  00002676  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000290  00000000  00000000  000030c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000596  00000000  00000000  00003358  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f21  00000000  00000000  000038ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000480f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  10:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  14:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  18:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  1c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  20:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  24:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  2c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  30:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  34:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  38:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  3c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  40:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  44:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  48:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  4c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  50:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  54:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  58:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  5c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  60:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>

00000068 <LcdCustomChar>:
  68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	ea e7       	ldi	r30, 0x7A	; 122
  bc:	f6 e0       	ldi	r31, 0x06	; 6
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a2 31       	cpi	r26, 0x12	; 18
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>

000000ca <__do_clear_bss>:
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	a2 e1       	ldi	r26, 0x12	; 18
  ce:	b1 e0       	ldi	r27, 0x01	; 1
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
  d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
  d4:	a3 31       	cpi	r26, 0x13	; 19
  d6:	b2 07       	cpc	r27, r18
  d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
  da:	0e 94 11 03 	call	0x622	; 0x622 <main>
  de:	0c 94 3b 03 	jmp	0x676	; 0x676 <_exit>

000000e2 <__bad_interrupt>:
  e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e6 <KeypadUpdate>:
#include "keypad.h"
uint8_t KeypadUpdate(void){
	
	uint8_t r, c;

	PORTv(0x0F);  // Habilita las resistencias de pull-up internas en los 4 pines bajos de PORTB (colocándolos en alto).
  e6:	85 b1       	in	r24, 0x05	; 5
  e8:	85 7e       	andi	r24, 0xE5	; 229
  ea:	85 b9       	out	0x05, r24	; 5
  ec:	8b b1       	in	r24, 0x0b	; 11
  ee:	8c 63       	ori	r24, 0x3C	; 60
  f0:	8b b9       	out	0x0b, r24	; 11

	for(c = 0; c < 4; c++)
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	93 c0       	rjmp	.+294    	; 0x21c <KeypadUpdate+0x136>
	{
		DDRv(0x00);        // Pone todos los pines de PORTB como entradas (por defecto).
  f6:	84 b1       	in	r24, 0x04	; 4
  f8:	85 7e       	andi	r24, 0xE5	; 229
  fa:	84 b9       	out	0x04, r24	; 4
  fc:	8a b1       	in	r24, 0x0a	; 10
  fe:	83 74       	andi	r24, 0x43	; 67
 100:	8a b9       	out	0x0a, r24	; 10
 102:	8a b1       	in	r24, 0x0a	; 10
 104:	8a b9       	out	0x0a, r24	; 10

		DDRv(0x80 >> c);    // Pone un solo pin como salida (una columna activa a la vez).
 106:	34 b1       	in	r19, 0x04	; 4
 108:	80 e8       	ldi	r24, 0x80	; 128
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	06 2e       	mov	r0, r22
 10e:	02 c0       	rjmp	.+4      	; 0x114 <KeypadUpdate+0x2e>
 110:	95 95       	asr	r25
 112:	87 95       	ror	r24
 114:	0a 94       	dec	r0
 116:	e2 f7       	brpl	.-8      	; 0x110 <KeypadUpdate+0x2a>
 118:	ac 01       	movw	r20, r24
 11a:	40 78       	andi	r20, 0x80	; 128
 11c:	55 27       	eor	r21, r21
 11e:	fa 01       	movw	r30, r20
 120:	f5 95       	asr	r31
 122:	e7 95       	ror	r30
 124:	f5 95       	asr	r31
 126:	e7 95       	ror	r30
 128:	f5 95       	asr	r31
 12a:	e7 95       	ror	r30
 12c:	ac 01       	movw	r20, r24
 12e:	40 74       	andi	r20, 0x40	; 64
 130:	55 27       	eor	r21, r21
 132:	55 95       	asr	r21
 134:	47 95       	ror	r20
 136:	55 95       	asr	r21
 138:	47 95       	ror	r20
 13a:	55 95       	asr	r21
 13c:	47 95       	ror	r20
 13e:	85 fb       	bst	r24, 5
 140:	22 27       	eor	r18, r18
 142:	20 f9       	bld	r18, 0
 144:	4e 2b       	or	r20, r30
 146:	42 2b       	or	r20, r18
 148:	35 7e       	andi	r19, 0xE5	; 229
 14a:	24 2f       	mov	r18, r20
 14c:	23 2b       	or	r18, r19
 14e:	24 b9       	out	0x04, r18	; 4
 150:	4a b1       	in	r20, 0x0a	; 10
 152:	9c 01       	movw	r18, r24
 154:	20 71       	andi	r18, 0x10	; 16
 156:	33 27       	eor	r19, r19
 158:	22 0f       	add	r18, r18
 15a:	33 1f       	adc	r19, r19
 15c:	22 0f       	add	r18, r18
 15e:	33 1f       	adc	r19, r19
 160:	22 0f       	add	r18, r18
 162:	33 1f       	adc	r19, r19
 164:	34 2f       	mov	r19, r20
 166:	33 74       	andi	r19, 0x43	; 67
 168:	23 2b       	or	r18, r19
 16a:	2a b9       	out	0x0a, r18	; 10
 16c:	7a b1       	in	r23, 0x0a	; 10
 16e:	fc 01       	movw	r30, r24
 170:	e4 70       	andi	r30, 0x04	; 4
 172:	ff 27       	eor	r31, r31
 174:	ee 0f       	add	r30, r30
 176:	ff 1f       	adc	r31, r31
 178:	ee 0f       	add	r30, r30
 17a:	ff 1f       	adc	r31, r31
 17c:	ee 0f       	add	r30, r30
 17e:	ff 1f       	adc	r31, r31
 180:	ac 01       	movw	r20, r24
 182:	42 70       	andi	r20, 0x02	; 2
 184:	55 27       	eor	r21, r21
 186:	44 0f       	add	r20, r20
 188:	55 1f       	adc	r21, r21
 18a:	44 0f       	add	r20, r20
 18c:	55 1f       	adc	r21, r21
 18e:	44 0f       	add	r20, r20
 190:	55 1f       	adc	r21, r21
 192:	9c 01       	movw	r18, r24
 194:	21 70       	andi	r18, 0x01	; 1
 196:	33 27       	eor	r19, r19
 198:	22 0f       	add	r18, r18
 19a:	33 1f       	adc	r19, r19
 19c:	22 0f       	add	r18, r18
 19e:	33 1f       	adc	r19, r19
 1a0:	88 70       	andi	r24, 0x08	; 8
 1a2:	8e 2b       	or	r24, r30
 1a4:	48 2b       	or	r20, r24
 1a6:	24 2b       	or	r18, r20
 1a8:	20 95       	com	r18
 1aa:	27 23       	and	r18, r23
 1ac:	2a b9       	out	0x0a, r18	; 10
		for(r = 0; r < 4; r++)
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	32 c0       	rjmp	.+100    	; 0x216 <KeypadUpdate+0x130>
		{
			if(!(PINv() & (0x08 >> r)))  // Lee los 4 pines de las filas.
 1b2:	89 b1       	in	r24, 0x09	; 9
 1b4:	88 70       	andi	r24, 0x08	; 8
 1b6:	29 b1       	in	r18, 0x09	; 9
 1b8:	20 72       	andi	r18, 0x20	; 32
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	35 95       	asr	r19
 1be:	27 95       	ror	r18
 1c0:	35 95       	asr	r19
 1c2:	27 95       	ror	r18
 1c4:	35 95       	asr	r19
 1c6:	27 95       	ror	r18
 1c8:	28 2b       	or	r18, r24
 1ca:	49 b1       	in	r20, 0x09	; 9
 1cc:	40 71       	andi	r20, 0x10	; 16
 1ce:	50 e0       	ldi	r21, 0x00	; 0
 1d0:	55 95       	asr	r21
 1d2:	47 95       	ror	r20
 1d4:	55 95       	asr	r21
 1d6:	47 95       	ror	r20
 1d8:	55 95       	asr	r21
 1da:	47 95       	ror	r20
 1dc:	24 2b       	or	r18, r20
 1de:	35 2b       	or	r19, r21
 1e0:	49 b1       	in	r20, 0x09	; 9
 1e2:	44 70       	andi	r20, 0x04	; 4
 1e4:	50 e0       	ldi	r21, 0x00	; 0
 1e6:	55 95       	asr	r21
 1e8:	47 95       	ror	r20
 1ea:	55 95       	asr	r21
 1ec:	47 95       	ror	r20
 1ee:	24 2b       	or	r18, r20
 1f0:	35 2b       	or	r19, r21
 1f2:	48 e0       	ldi	r20, 0x08	; 8
 1f4:	50 e0       	ldi	r21, 0x00	; 0
 1f6:	09 2e       	mov	r0, r25
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <KeypadUpdate+0x118>
 1fa:	55 95       	asr	r21
 1fc:	47 95       	ror	r20
 1fe:	0a 94       	dec	r0
 200:	e2 f7       	brpl	.-8      	; 0x1fa <KeypadUpdate+0x114>
 202:	24 23       	and	r18, r20
 204:	35 23       	and	r19, r21
 206:	23 2b       	or	r18, r19
 208:	29 f4       	brne	.+10     	; 0x214 <KeypadUpdate+0x12e>
			{
				return (r * 4 + c);    // Retorna un número que identifica qué tecla se presionó.
 20a:	99 0f       	add	r25, r25
 20c:	99 0f       	add	r25, r25
 20e:	89 2f       	mov	r24, r25
 210:	86 0f       	add	r24, r22
 212:	08 95       	ret
	for(c = 0; c < 4; c++)
	{
		DDRv(0x00);        // Pone todos los pines de PORTB como entradas (por defecto).

		DDRv(0x80 >> c);    // Pone un solo pin como salida (una columna activa a la vez).
		for(r = 0; r < 4; r++)
 214:	9f 5f       	subi	r25, 0xFF	; 255
 216:	94 30       	cpi	r25, 0x04	; 4
 218:	60 f2       	brcs	.-104    	; 0x1b2 <KeypadUpdate+0xcc>
	
	uint8_t r, c;

	PORTv(0x0F);  // Habilita las resistencias de pull-up internas en los 4 pines bajos de PORTB (colocándolos en alto).

	for(c = 0; c < 4; c++)
 21a:	6f 5f       	subi	r22, 0xFF	; 255
 21c:	64 30       	cpi	r22, 0x04	; 4
 21e:	08 f4       	brcc	.+2      	; 0x222 <KeypadUpdate+0x13c>
 220:	6a cf       	rjmp	.-300    	; 0xf6 <KeypadUpdate+0x10>
			{
				return (r * 4 + c);    // Retorna un número que identifica qué tecla se presionó.
			}
		}
	}
	return 0xFF;  // Si ninguna tecla fue presionada, retorna 0xFF.
 222:	8f ef       	ldi	r24, 0xFF	; 255
}
 224:	08 95       	ret

00000226 <KEYPAD_Scan>:
uint8_t KEYPAD_Scan (uint8_t *pkey)
{
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	ec 01       	movw	r28, r24
	static uint8_t Old_key, Last_valid_key=0xFF; // no hay tecla presionada;
	uint8_t Key;
	
	Key= KeypadUpdate();
 22c:	0e 94 73 00 	call	0xe6	; 0xe6 <KeypadUpdate>
	if(Key==0xFF){
 230:	8f 3f       	cpi	r24, 0xFF	; 255
 232:	31 f4       	brne	.+12     	; 0x240 <KEYPAD_Scan+0x1a>
		Old_key=0xFF;	// no hay tecla presionada
 234:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
		Last_valid_key=0xFF;
 238:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		return 0;
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	10 c0       	rjmp	.+32     	; 0x260 <KEYPAD_Scan+0x3a>
	}
	if(Key==Old_key) { //2da verificación
 240:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <__data_end>
 244:	89 13       	cpse	r24, r25
 246:	09 c0       	rjmp	.+18     	; 0x25a <KEYPAD_Scan+0x34>
		if(Key!=Last_valid_key){ //evita múltiple detección
 248:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 24c:	89 17       	cp	r24, r25
 24e:	29 f0       	breq	.+10     	; 0x25a <KEYPAD_Scan+0x34>
			*pkey=Key;
 250:	88 83       	st	Y, r24
			Last_valid_key = Key;
 252:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			return 1;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	03 c0       	rjmp	.+6      	; 0x260 <KEYPAD_Scan+0x3a>
		}
	}
	Old_key=Key; //1era verificación
 25a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
	return 0;
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	08 95       	ret

00000266 <LCDsendChar>:
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 266:	65 b1       	in	r22, 0x05	; 5
 268:	98 2f       	mov	r25, r24
 26a:	90 74       	andi	r25, 0x40	; 64
 26c:	49 2f       	mov	r20, r25
 26e:	50 e0       	ldi	r21, 0x00	; 0
 270:	55 95       	asr	r21
 272:	47 95       	ror	r20
 274:	55 95       	asr	r21
 276:	47 95       	ror	r20
 278:	55 95       	asr	r21
 27a:	47 95       	ror	r20
 27c:	55 95       	asr	r21
 27e:	47 95       	ror	r20
 280:	98 2f       	mov	r25, r24
 282:	90 78       	andi	r25, 0x80	; 128
 284:	29 2f       	mov	r18, r25
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	02 2e       	mov	r0, r18
 28a:	23 2f       	mov	r18, r19
 28c:	00 0c       	add	r0, r0
 28e:	22 1f       	adc	r18, r18
 290:	33 0b       	sbc	r19, r19
 292:	00 0c       	add	r0, r0
 294:	22 1f       	adc	r18, r18
 296:	33 1f       	adc	r19, r19
 298:	96 2f       	mov	r25, r22
 29a:	99 7f       	andi	r25, 0xF9	; 249
 29c:	49 2b       	or	r20, r25
 29e:	24 2b       	or	r18, r20
 2a0:	25 b9       	out	0x05, r18	; 5
 2a2:	68 b1       	in	r22, 0x08	; 8
 2a4:	98 2f       	mov	r25, r24
 2a6:	90 71       	andi	r25, 0x10	; 16
 2a8:	49 2f       	mov	r20, r25
 2aa:	50 e0       	ldi	r21, 0x00	; 0
 2ac:	55 95       	asr	r21
 2ae:	47 95       	ror	r20
 2b0:	55 95       	asr	r21
 2b2:	47 95       	ror	r20
 2b4:	55 95       	asr	r21
 2b6:	47 95       	ror	r20
 2b8:	98 2f       	mov	r25, r24
 2ba:	90 72       	andi	r25, 0x20	; 32
 2bc:	29 2f       	mov	r18, r25
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	35 95       	asr	r19
 2c2:	27 95       	ror	r18
 2c4:	35 95       	asr	r19
 2c6:	27 95       	ror	r18
 2c8:	35 95       	asr	r19
 2ca:	27 95       	ror	r18
 2cc:	96 2f       	mov	r25, r22
 2ce:	99 7f       	andi	r25, 0xF9	; 249
 2d0:	49 2b       	or	r20, r25
 2d2:	24 2b       	or	r18, r20
 2d4:	28 b9       	out	0x08, r18	; 8
 2d6:	9b b1       	in	r25, 0x0b	; 11
 2d8:	92 60       	ori	r25, 0x02	; 2
 2da:	9b b9       	out	0x0b, r25	; 11
 2dc:	9b b1       	in	r25, 0x0b	; 11
 2de:	91 60       	ori	r25, 0x01	; 1
 2e0:	9b b9       	out	0x0b, r25	; 11
 2e2:	25 ed       	ldi	r18, 0xD5	; 213
 2e4:	2a 95       	dec	r18
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <LCDsendChar+0x7e>
 2e8:	00 00       	nop
 2ea:	9b b1       	in	r25, 0x0b	; 11
 2ec:	9e 7f       	andi	r25, 0xFE	; 254
 2ee:	9b b9       	out	0x0b, r25	; 11
 2f0:	9b b1       	in	r25, 0x0b	; 11
 2f2:	9d 7f       	andi	r25, 0xFD	; 253
 2f4:	9b b9       	out	0x0b, r25	; 11
 2f6:	95 ed       	ldi	r25, 0xD5	; 213
 2f8:	9a 95       	dec	r25
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <LCDsendChar+0x92>
 2fc:	00 00       	nop
 2fe:	65 b1       	in	r22, 0x05	; 5
 300:	20 e1       	ldi	r18, 0x10	; 16
 302:	82 9f       	mul	r24, r18
 304:	c0 01       	movw	r24, r0
 306:	11 24       	eor	r1, r1
 308:	ac 01       	movw	r20, r24
 30a:	40 74       	andi	r20, 0x40	; 64
 30c:	55 27       	eor	r21, r21
 30e:	55 95       	asr	r21
 310:	47 95       	ror	r20
 312:	55 95       	asr	r21
 314:	47 95       	ror	r20
 316:	55 95       	asr	r21
 318:	47 95       	ror	r20
 31a:	55 95       	asr	r21
 31c:	47 95       	ror	r20
 31e:	9c 01       	movw	r18, r24
 320:	20 78       	andi	r18, 0x80	; 128
 322:	33 27       	eor	r19, r19
 324:	02 2e       	mov	r0, r18
 326:	23 2f       	mov	r18, r19
 328:	00 0c       	add	r0, r0
 32a:	22 1f       	adc	r18, r18
 32c:	33 0b       	sbc	r19, r19
 32e:	00 0c       	add	r0, r0
 330:	22 1f       	adc	r18, r18
 332:	33 1f       	adc	r19, r19
 334:	36 2f       	mov	r19, r22
 336:	39 7f       	andi	r19, 0xF9	; 249
 338:	43 2b       	or	r20, r19
 33a:	24 2b       	or	r18, r20
 33c:	25 b9       	out	0x05, r18	; 5
 33e:	48 b1       	in	r20, 0x08	; 8
 340:	9c 01       	movw	r18, r24
 342:	20 71       	andi	r18, 0x10	; 16
 344:	33 27       	eor	r19, r19
 346:	35 95       	asr	r19
 348:	27 95       	ror	r18
 34a:	35 95       	asr	r19
 34c:	27 95       	ror	r18
 34e:	35 95       	asr	r19
 350:	27 95       	ror	r18
 352:	80 72       	andi	r24, 0x20	; 32
 354:	99 27       	eor	r25, r25
 356:	95 95       	asr	r25
 358:	87 95       	ror	r24
 35a:	95 95       	asr	r25
 35c:	87 95       	ror	r24
 35e:	95 95       	asr	r25
 360:	87 95       	ror	r24
 362:	94 2f       	mov	r25, r20
 364:	99 7f       	andi	r25, 0xF9	; 249
 366:	29 2b       	or	r18, r25
 368:	82 2b       	or	r24, r18
 36a:	88 b9       	out	0x08, r24	; 8
 36c:	8b b1       	in	r24, 0x0b	; 11
 36e:	82 60       	ori	r24, 0x02	; 2
 370:	8b b9       	out	0x0b, r24	; 11
 372:	8b b1       	in	r24, 0x0b	; 11
 374:	81 60       	ori	r24, 0x01	; 1
 376:	8b b9       	out	0x0b, r24	; 11
 378:	85 ed       	ldi	r24, 0xD5	; 213
 37a:	8a 95       	dec	r24
 37c:	f1 f7       	brne	.-4      	; 0x37a <LCDsendChar+0x114>
 37e:	00 00       	nop
 380:	8b b1       	in	r24, 0x0b	; 11
 382:	8e 7f       	andi	r24, 0xFE	; 254
 384:	8b b9       	out	0x0b, r24	; 11
 386:	8b b1       	in	r24, 0x0b	; 11
 388:	8d 7f       	andi	r24, 0xFD	; 253
 38a:	8b b9       	out	0x0b, r24	; 11
 38c:	95 ed       	ldi	r25, 0xD5	; 213
 38e:	9a 95       	dec	r25
 390:	f1 f7       	brne	.-4      	; 0x38e <LCDsendChar+0x128>
 392:	00 00       	nop
 394:	08 95       	ret

00000396 <LCDsendCommand>:
 396:	65 b1       	in	r22, 0x05	; 5
 398:	98 2f       	mov	r25, r24
 39a:	90 74       	andi	r25, 0x40	; 64
 39c:	49 2f       	mov	r20, r25
 39e:	50 e0       	ldi	r21, 0x00	; 0
 3a0:	55 95       	asr	r21
 3a2:	47 95       	ror	r20
 3a4:	55 95       	asr	r21
 3a6:	47 95       	ror	r20
 3a8:	55 95       	asr	r21
 3aa:	47 95       	ror	r20
 3ac:	55 95       	asr	r21
 3ae:	47 95       	ror	r20
 3b0:	98 2f       	mov	r25, r24
 3b2:	90 78       	andi	r25, 0x80	; 128
 3b4:	29 2f       	mov	r18, r25
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	02 2e       	mov	r0, r18
 3ba:	23 2f       	mov	r18, r19
 3bc:	00 0c       	add	r0, r0
 3be:	22 1f       	adc	r18, r18
 3c0:	33 0b       	sbc	r19, r19
 3c2:	00 0c       	add	r0, r0
 3c4:	22 1f       	adc	r18, r18
 3c6:	33 1f       	adc	r19, r19
 3c8:	96 2f       	mov	r25, r22
 3ca:	99 7f       	andi	r25, 0xF9	; 249
 3cc:	49 2b       	or	r20, r25
 3ce:	24 2b       	or	r18, r20
 3d0:	25 b9       	out	0x05, r18	; 5
 3d2:	68 b1       	in	r22, 0x08	; 8
 3d4:	98 2f       	mov	r25, r24
 3d6:	90 71       	andi	r25, 0x10	; 16
 3d8:	49 2f       	mov	r20, r25
 3da:	50 e0       	ldi	r21, 0x00	; 0
 3dc:	55 95       	asr	r21
 3de:	47 95       	ror	r20
 3e0:	55 95       	asr	r21
 3e2:	47 95       	ror	r20
 3e4:	55 95       	asr	r21
 3e6:	47 95       	ror	r20
 3e8:	98 2f       	mov	r25, r24
 3ea:	90 72       	andi	r25, 0x20	; 32
 3ec:	29 2f       	mov	r18, r25
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	35 95       	asr	r19
 3f2:	27 95       	ror	r18
 3f4:	35 95       	asr	r19
 3f6:	27 95       	ror	r18
 3f8:	35 95       	asr	r19
 3fa:	27 95       	ror	r18
 3fc:	96 2f       	mov	r25, r22
 3fe:	99 7f       	andi	r25, 0xF9	; 249
 400:	49 2b       	or	r20, r25
 402:	24 2b       	or	r18, r20
 404:	28 b9       	out	0x08, r18	; 8
 406:	9b b1       	in	r25, 0x0b	; 11
 408:	91 60       	ori	r25, 0x01	; 1
 40a:	9b b9       	out	0x0b, r25	; 11
 40c:	ef e9       	ldi	r30, 0x9F	; 159
 40e:	ff e0       	ldi	r31, 0x0F	; 15
 410:	31 97       	sbiw	r30, 0x01	; 1
 412:	f1 f7       	brne	.-4      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 414:	00 c0       	rjmp	.+0      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 416:	00 00       	nop
 418:	9b b1       	in	r25, 0x0b	; 11
 41a:	9e 7f       	andi	r25, 0xFE	; 254
 41c:	9b b9       	out	0x0b, r25	; 11
 41e:	ef e9       	ldi	r30, 0x9F	; 159
 420:	ff e0       	ldi	r31, 0x0F	; 15
 422:	31 97       	sbiw	r30, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 426:	00 c0       	rjmp	.+0      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 428:	00 00       	nop
 42a:	65 b1       	in	r22, 0x05	; 5
 42c:	f0 e1       	ldi	r31, 0x10	; 16
 42e:	8f 9f       	mul	r24, r31
 430:	c0 01       	movw	r24, r0
 432:	11 24       	eor	r1, r1
 434:	ac 01       	movw	r20, r24
 436:	40 74       	andi	r20, 0x40	; 64
 438:	55 27       	eor	r21, r21
 43a:	55 95       	asr	r21
 43c:	47 95       	ror	r20
 43e:	55 95       	asr	r21
 440:	47 95       	ror	r20
 442:	55 95       	asr	r21
 444:	47 95       	ror	r20
 446:	55 95       	asr	r21
 448:	47 95       	ror	r20
 44a:	9c 01       	movw	r18, r24
 44c:	20 78       	andi	r18, 0x80	; 128
 44e:	33 27       	eor	r19, r19
 450:	02 2e       	mov	r0, r18
 452:	23 2f       	mov	r18, r19
 454:	00 0c       	add	r0, r0
 456:	22 1f       	adc	r18, r18
 458:	33 0b       	sbc	r19, r19
 45a:	00 0c       	add	r0, r0
 45c:	22 1f       	adc	r18, r18
 45e:	33 1f       	adc	r19, r19
 460:	36 2f       	mov	r19, r22
 462:	39 7f       	andi	r19, 0xF9	; 249
 464:	43 2b       	or	r20, r19
 466:	24 2b       	or	r18, r20
 468:	25 b9       	out	0x05, r18	; 5
 46a:	48 b1       	in	r20, 0x08	; 8
 46c:	9c 01       	movw	r18, r24
 46e:	20 71       	andi	r18, 0x10	; 16
 470:	33 27       	eor	r19, r19
 472:	35 95       	asr	r19
 474:	27 95       	ror	r18
 476:	35 95       	asr	r19
 478:	27 95       	ror	r18
 47a:	35 95       	asr	r19
 47c:	27 95       	ror	r18
 47e:	80 72       	andi	r24, 0x20	; 32
 480:	99 27       	eor	r25, r25
 482:	95 95       	asr	r25
 484:	87 95       	ror	r24
 486:	95 95       	asr	r25
 488:	87 95       	ror	r24
 48a:	95 95       	asr	r25
 48c:	87 95       	ror	r24
 48e:	94 2f       	mov	r25, r20
 490:	99 7f       	andi	r25, 0xF9	; 249
 492:	29 2b       	or	r18, r25
 494:	82 2b       	or	r24, r18
 496:	88 b9       	out	0x08, r24	; 8
 498:	8b b1       	in	r24, 0x0b	; 11
 49a:	81 60       	ori	r24, 0x01	; 1
 49c:	8b b9       	out	0x0b, r24	; 11
 49e:	8f e9       	ldi	r24, 0x9F	; 159
 4a0:	9f e0       	ldi	r25, 0x0F	; 15
 4a2:	01 97       	sbiw	r24, 0x01	; 1
 4a4:	f1 f7       	brne	.-4      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 4a8:	00 00       	nop
 4aa:	8b b1       	in	r24, 0x0b	; 11
 4ac:	8e 7f       	andi	r24, 0xFE	; 254
 4ae:	8b b9       	out	0x0b, r24	; 11
 4b0:	ef e9       	ldi	r30, 0x9F	; 159
 4b2:	ff e0       	ldi	r31, 0x0F	; 15
 4b4:	31 97       	sbiw	r30, 0x01	; 1
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 4ba:	00 00       	nop
 4bc:	08 95       	ret

000004be <LCDGotoXY>:
 4be:	62 30       	cpi	r22, 0x02	; 2
 4c0:	31 f0       	breq	.+12     	; 0x4ce <LCDGotoXY+0x10>
 4c2:	63 30       	cpi	r22, 0x03	; 3
 4c4:	31 f0       	breq	.+12     	; 0x4d2 <LCDGotoXY+0x14>
 4c6:	61 30       	cpi	r22, 0x01	; 1
 4c8:	29 f4       	brne	.+10     	; 0x4d4 <LCDGotoXY+0x16>
 4ca:	80 5c       	subi	r24, 0xC0	; 192
 4cc:	03 c0       	rjmp	.+6      	; 0x4d4 <LCDGotoXY+0x16>
 4ce:	8c 5e       	subi	r24, 0xEC	; 236
 4d0:	01 c0       	rjmp	.+2      	; 0x4d4 <LCDGotoXY+0x16>
 4d2:	8c 5a       	subi	r24, 0xAC	; 172
 4d4:	80 68       	ori	r24, 0x80	; 128
 4d6:	0e 94 cb 01 	call	0x396	; 0x396 <LCDsendCommand>
 4da:	08 95       	ret

000004dc <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 4dc:	ef 92       	push	r14
 4de:	ff 92       	push	r15
 4e0:	0f 93       	push	r16
 4e2:	1f 93       	push	r17
 4e4:	cf 93       	push	r28
 4e6:	df 93       	push	r29
 4e8:	7c 01       	movw	r14, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 4ea:	86 2f       	mov	r24, r22
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	88 0f       	add	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	80 64       	ori	r24, 0x40	; 64
	for (i=0; i<8; i++){
 4fc:	c0 e0       	ldi	r28, 0x00	; 0
 4fe:	d0 e0       	ldi	r29, 0x00	; 0
 500:	0d c0       	rjmp	.+26     	; 0x51c <LCDdefinechar+0x40>
		pcc=pgm_read_byte(&pc[i]);
 502:	f7 01       	movw	r30, r14
 504:	ec 0f       	add	r30, r28
 506:	fd 1f       	adc	r31, r29
 508:	14 91       	lpm	r17, Z
		LCDsendCommand(a++);
 50a:	01 e0       	ldi	r16, 0x01	; 1
 50c:	08 0f       	add	r16, r24
 50e:	0e 94 cb 01 	call	0x396	; 0x396 <LCDsendCommand>
		LCDsendChar(pcc);
 512:	81 2f       	mov	r24, r17
 514:	0e 94 33 01 	call	0x266	; 0x266 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 518:	21 96       	adiw	r28, 0x01	; 1
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
 51a:	80 2f       	mov	r24, r16
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 51c:	c8 30       	cpi	r28, 0x08	; 8
 51e:	d1 05       	cpc	r29, r1
 520:	80 f3       	brcs	.-32     	; 0x502 <LCDdefinechar+0x26>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 522:	df 91       	pop	r29
 524:	cf 91       	pop	r28
 526:	1f 91       	pop	r17
 528:	0f 91       	pop	r16
 52a:	ff 90       	pop	r15
 52c:	ef 90       	pop	r14
 52e:	08 95       	ret

00000530 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 530:	cf 93       	push	r28
 532:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 534:	8f e5       	ldi	r24, 0x5F	; 95
 536:	9a ee       	ldi	r25, 0xEA	; 234
 538:	01 97       	sbiw	r24, 0x01	; 1
 53a:	f1 f7       	brne	.-4      	; 0x538 <LCDinit+0x8>
 53c:	00 c0       	rjmp	.+0      	; 0x53e <LCDinit+0xe>
 53e:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LCD_DATAWR(0x00);	
 540:	85 b1       	in	r24, 0x05	; 5
 542:	89 7f       	andi	r24, 0xF9	; 249
 544:	85 b9       	out	0x05, r24	; 5
 546:	88 b1       	in	r24, 0x08	; 8
 548:	89 7f       	andi	r24, 0xF9	; 249
 54a:	88 b9       	out	0x08, r24	; 8
	LCP=0x00;
 54c:	1b b8       	out	0x0b, r1	; 11
	LDDR1|=1<<LCD_D7|1<<LCD_D6;
 54e:	84 b1       	in	r24, 0x04	; 4
 550:	86 60       	ori	r24, 0x06	; 6
 552:	84 b9       	out	0x04, r24	; 4
	LDDR2|=1<<LCD_D4|1<<LCD_D5;
 554:	87 b1       	in	r24, 0x07	; 7
 556:	86 60       	ori	r24, 0x06	; 6
 558:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 55a:	8a b1       	in	r24, 0x0a	; 10
 55c:	83 60       	ori	r24, 0x03	; 3
 55e:	8a b9       	out	0x0a, r24	; 10
   //---------one------
	LCD_DATAWR(0b00110000);	
 560:	85 b1       	in	r24, 0x05	; 5
 562:	89 7f       	andi	r24, 0xF9	; 249
 564:	85 b9       	out	0x05, r24	; 5
 566:	88 b1       	in	r24, 0x08	; 8
 568:	86 60       	ori	r24, 0x06	; 6
 56a:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 56c:	8b b1       	in	r24, 0x0b	; 11
 56e:	81 60       	ori	r24, 0x01	; 1
 570:	8b b9       	out	0x0b, r24	; 11
 572:	8f e9       	ldi	r24, 0x9F	; 159
 574:	9f e0       	ldi	r25, 0x0F	; 15
 576:	01 97       	sbiw	r24, 0x01	; 1
 578:	f1 f7       	brne	.-4      	; 0x576 <LCDinit+0x46>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <LCDinit+0x4c>
 57c:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 57e:	8b b1       	in	r24, 0x0b	; 11
 580:	8e 7f       	andi	r24, 0xFE	; 254
 582:	8b b9       	out	0x0b, r24	; 11
 584:	8f e9       	ldi	r24, 0x9F	; 159
 586:	9f e0       	ldi	r25, 0x0F	; 15
 588:	01 97       	sbiw	r24, 0x01	; 1
 58a:	f1 f7       	brne	.-4      	; 0x588 <LCDinit+0x58>
 58c:	00 c0       	rjmp	.+0      	; 0x58e <LCDinit+0x5e>
 58e:	00 00       	nop
	_delay_ms(1);
	//-----------two-----------
	
	LCD_DATAWR(0b00110000);	
 590:	85 b1       	in	r24, 0x05	; 5
 592:	89 7f       	andi	r24, 0xF9	; 249
 594:	85 b9       	out	0x05, r24	; 5
 596:	88 b1       	in	r24, 0x08	; 8
 598:	86 60       	ori	r24, 0x06	; 6
 59a:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 59c:	8b b1       	in	r24, 0x0b	; 11
 59e:	81 60       	ori	r24, 0x01	; 1
 5a0:	8b b9       	out	0x0b, r24	; 11
 5a2:	8f e9       	ldi	r24, 0x9F	; 159
 5a4:	9f e0       	ldi	r25, 0x0F	; 15
 5a6:	01 97       	sbiw	r24, 0x01	; 1
 5a8:	f1 f7       	brne	.-4      	; 0x5a6 <LCDinit+0x76>
 5aa:	00 c0       	rjmp	.+0      	; 0x5ac <LCDinit+0x7c>
 5ac:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 5ae:	8b b1       	in	r24, 0x0b	; 11
 5b0:	8e 7f       	andi	r24, 0xFE	; 254
 5b2:	8b b9       	out	0x0b, r24	; 11
 5b4:	8f e9       	ldi	r24, 0x9F	; 159
 5b6:	9f e0       	ldi	r25, 0x0F	; 15
 5b8:	01 97       	sbiw	r24, 0x01	; 1
 5ba:	f1 f7       	brne	.-4      	; 0x5b8 <LCDinit+0x88>
 5bc:	00 c0       	rjmp	.+0      	; 0x5be <LCDinit+0x8e>
 5be:	00 00       	nop
	_delay_ms(1);
	//-------three-------------

	LCD_DATAWR(0b00100000);	
 5c0:	85 b1       	in	r24, 0x05	; 5
 5c2:	89 7f       	andi	r24, 0xF9	; 249
 5c4:	85 b9       	out	0x05, r24	; 5
 5c6:	88 b1       	in	r24, 0x08	; 8
 5c8:	89 7f       	andi	r24, 0xF9	; 249
 5ca:	84 60       	ori	r24, 0x04	; 4
 5cc:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 5ce:	8b b1       	in	r24, 0x0b	; 11
 5d0:	81 60       	ori	r24, 0x01	; 1
 5d2:	8b b9       	out	0x0b, r24	; 11
 5d4:	8f e9       	ldi	r24, 0x9F	; 159
 5d6:	9f e0       	ldi	r25, 0x0F	; 15
 5d8:	01 97       	sbiw	r24, 0x01	; 1
 5da:	f1 f7       	brne	.-4      	; 0x5d8 <LCDinit+0xa8>
 5dc:	00 c0       	rjmp	.+0      	; 0x5de <LCDinit+0xae>
 5de:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 5e0:	8b b1       	in	r24, 0x0b	; 11
 5e2:	8e 7f       	andi	r24, 0xFE	; 254
 5e4:	8b b9       	out	0x0b, r24	; 11
 5e6:	8f e9       	ldi	r24, 0x9F	; 159
 5e8:	9f e0       	ldi	r25, 0x0F	; 15
 5ea:	01 97       	sbiw	r24, 0x01	; 1
 5ec:	f1 f7       	brne	.-4      	; 0x5ea <LCDinit+0xba>
 5ee:	00 c0       	rjmp	.+0      	; 0x5f0 <LCDinit+0xc0>
 5f0:	00 00       	nop
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 5f2:	88 e2       	ldi	r24, 0x28	; 40
 5f4:	0e 94 cb 01 	call	0x396	; 0x396 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 5f8:	8c e0       	ldi	r24, 0x0C	; 12
 5fa:	0e 94 cb 01 	call	0x396	; 0x396 <LCDsendCommand>
		//init 8 custom chars
	uint8_t ch=0, chn=0;
 5fe:	60 e0       	ldi	r22, 0x00	; 0
 600:	c0 e0       	ldi	r28, 0x00	; 0
	while(ch<64)
 602:	0a c0       	rjmp	.+20     	; 0x618 <LCDinit+0xe8>
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 604:	d1 e0       	ldi	r29, 0x01	; 1
 606:	d6 0f       	add	r29, r22
 608:	8c 2f       	mov	r24, r28
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	88 59       	subi	r24, 0x98	; 152
 60e:	9f 4f       	sbci	r25, 0xFF	; 255
 610:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCDdefinechar>
		ch=ch+8;
 614:	c8 5f       	subi	r28, 0xF8	; 248
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 616:	6d 2f       	mov	r22, r29
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 618:	c0 34       	cpi	r28, 0x40	; 64
 61a:	a0 f3       	brcs	.-24     	; 0x604 <LCDinit+0xd4>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 61c:	df 91       	pop	r29
 61e:	cf 91       	pop	r28
 620:	08 95       	ret

00000622 <main>:
	'3','6','9','#',
	'A','B','C','D'
};

int main(void)
{
 622:	cf 93       	push	r28
 624:	df 93       	push	r29
 626:	1f 92       	push	r1
 628:	cd b7       	in	r28, 0x3d	; 61
 62a:	de b7       	in	r29, 0x3e	; 62
	uint8_t lectura = 0xFF;
 62c:	8f ef       	ldi	r24, 0xFF	; 255
 62e:	89 83       	std	Y+1, r24	; 0x01

	LCDinit();          // Inicializá el LCD una sola vez fuera del loop
 630:	0e 94 98 02 	call	0x530	; 0x530 <LCDinit>
 634:	2f ef       	ldi	r18, 0xFF	; 255
 636:	81 ee       	ldi	r24, 0xE1	; 225
 638:	94 e0       	ldi	r25, 0x04	; 4
 63a:	21 50       	subi	r18, 0x01	; 1
 63c:	80 40       	sbci	r24, 0x00	; 0
 63e:	90 40       	sbci	r25, 0x00	; 0
 640:	e1 f7       	brne	.-8      	; 0x63a <main+0x18>
 642:	00 c0       	rjmp	.+0      	; 0x644 <main+0x22>
 644:	00 00       	nop
	_delay_ms(100);
	LCDGotoXY(0,0);
 646:	60 e0       	ldi	r22, 0x00	; 0
 648:	80 e0       	ldi	r24, 0x00	; 0
 64a:	0e 94 5f 02 	call	0x4be	; 0x4be <LCDGotoXY>
	while (1)
	{		
		if (KEYPAD_Scan(&lectura))  // Devuelve 1 si se detectó una tecla nueva
 64e:	ce 01       	movw	r24, r28
 650:	01 96       	adiw	r24, 0x01	; 1
 652:	0e 94 13 01 	call	0x226	; 0x226 <KEYPAD_Scan>
 656:	88 23       	and	r24, r24
 658:	d1 f3       	breq	.-12     	; 0x64e <main+0x2c>
		{
			if (lectura < 16)       // Asegura que el índice esté dentro del keymap
 65a:	e9 81       	ldd	r30, Y+1	; 0x01
 65c:	e0 31       	cpi	r30, 0x10	; 16
 65e:	b8 f7       	brcc	.-18     	; 0x64e <main+0x2c>
			{
				LCDsendChar(keymap[lectura]);       // Muestra la tecla presionada
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	ef 5f       	subi	r30, 0xFF	; 255
 664:	fe 4f       	sbci	r31, 0xFE	; 254
 666:	80 81       	ld	r24, Z
 668:	0e 94 33 01 	call	0x266	; 0x266 <LCDsendChar>
				LCDGotoXY(0,0);
 66c:	60 e0       	ldi	r22, 0x00	; 0
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	0e 94 5f 02 	call	0x4be	; 0x4be <LCDGotoXY>
 674:	ec cf       	rjmp	.-40     	; 0x64e <main+0x2c>

00000676 <_exit>:
 676:	f8 94       	cli

00000678 <__stop_program>:
 678:	ff cf       	rjmp	.-2      	; 0x678 <__stop_program>
